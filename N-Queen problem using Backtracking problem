
/*C++ Implementation for N-QUEUE PROBLEM*/ 
#include<bits/stdc++.h>
using namespace std;
const int maxsize=1000;
int valid(int chess_board[][maxsize],int row, int column, int n)
{
    /*check for whether there is two queen on the same raw*/
    for(int i=0;i<column;i++)
    {
        if(chess_board[row][i])
        {
            return 0;
        }
    }
    /*check whether there is a queen on the left upper diagonal*/
    for(int i=row,j=column;i>=0&&j>=0;i--,j--)
    {
        if(chess_board[i][j])
        {
            return 0;
        }
    }
    /*check whether there is a queen on the left bottom diagonal*/
    for(int i=row,j=column;i<n&&j>=0;i++,j--)
    {
        if(chess_board[i][j])
        {
            return 0;
        }
    }
    /*if queen in safe condition*/
    return 1;
}
int solution_existency(int chess_board[][maxsize],int column,int n)
{
    /*if n queens are placed successfully*/
    if(column>=n)
    {
        return 1;
    }
    /*for each row check placing of queen is possible or not*/
    for(int i=0;i<n;i++)
    {
        if(valid(chess_board,i,column,n))
        {
            /*if its valid position then place at here(i,column)*/
            chess_board[i][column]=1;
            if(solution_existency(chess_board,column+1,n))
            {
                return 1;
            }
            /*where no place is possible to place the queen then remove the queen*/
            chess_board[i][column]=0;
        }
    }
    /*when no case found in which we store n queens in chess board*/
    return 0;
}
int n_queen(int chess_board[][maxsize], int n)
{
    int i=solution_existency(chess_board,0,n);
    return i;
}
int main() 
{ 
    int n;
    /*input value*/
    cin>>n;
    int chess_board[maxsize][maxsize];
    memset(chess_board,0,sizeof(chess_board));
    int possible=n_queen(chess_board,n);
    if(possible)
    {
    /*Print the chess board current state which is our answer*/
    cout<<"Chess board current state: "<<endl;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cout<<chess_board[i][j]<<" ";
        }
        cout<<'\n';
    }
    }
    else
    {
        cout<<-1<<endl;
    }
    return 0; 
}
